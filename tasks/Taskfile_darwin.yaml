version: '3'

tasks:
  brewinstall:
    desc: Install packages
    label: '{{.TASK}}{{if .NAME}} - {{.NAME}}{{end}}'
    vars:
      BREW_FLAGS: '{{default "--formula" .BREW_FLAGS}}'
      INSTALLED:
        sh: brew list {{.BREW_FLAGS}} '{{.NAME}}' || echo ''
      OUTDATED:
        sh: brew outdated {{.BREW_FLAGS}} '{{.NAME}}' || echo ''
    cmds:
      - brew install {{.BREW_FLAGS}} '{{.NAME}}'
    status:
      - test -n '{{.INSTALLED}}'
      - test ! -n '{{.OUTDATED}}'

  normalize:
    desc: Use GNU commands
    cmds:
      - task: brewinstall
        vars: { NAME: bash }
      - task: brewinstall
        vars: { NAME: bash-completion@2 }
      - task: brewinstall
        vars: { NAME: coreutils }
      - task: brewinstall
        vars: { NAME: diffutils }
      - task: brewinstall
        vars: { NAME: ed }
      - task: brewinstall
        vars: { NAME: findutils }
      - task: brewinstall
        vars: { NAME: gawk }
      - task: brewinstall
        vars: { NAME: gnu-sed }
      - task: brewinstall
        vars: { NAME: gnu-tar }
      - task: brewinstall
        vars: { NAME: grep }
      - task: brewinstall
        vars: { NAME: gzip }
      - |
        if [[ "$SHELL" != "$(brew --prefix)/bin/bash" ]]; then
          sudo dscl . -create "/Users/${USER}" UserShell "$(brew --prefix)/bin/bash"
        fi

  git:
    cmds:
      - task: brewinstall
        vars: { NAME: git }
      - touch ~/.gitignore
      - echo ".DS_Store" > ${HOME}/.gitignore
      - git config --global core.excludesfile ~/gitignore


  tools:
    desc: Install tools for development
    cmds:
      - task: brewinstall
        vars: { NAME: go }
      - task: brewinstall
        vars: { NAME: neovim }
      - task: brewinstall
        vars: { NAME: git }
      - task: brewinstall
        vars: { NAME: ripgrep }
      - task: brewinstall
        vars: { NAME: direnv }
      - task: brewinstall
        vars: { NAME: fzf }
      - $(brew --prefix)/opt/fzf/install
      - task: brewinstall
        vars: { NAME: pyenv }
      - task: brewinstall
        vars: { NAME: tmux }
      - task: brewinstall
        vars: { NAME: gopls }
      - task: brewinstall
        vars: { NAME: deno }
      - task: java
      - task: volta
      - task: alacritty

  alacritty:
    desc: Install alacritty
    cmds:
      - task: brewinstall
        vars: { NAME: alacritty, BREW_FLAGS: '--cask' }

  java:
    cmds:
      - task: brewinstall
        vars: { NAME: java11 }
      - sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

  volta:
    cmds:
      - |
        curl https://get.volta.sh | bash -s -- --skip-setup

  docker:
    cmds:
      - task: brewinstall
        vars: { NAME: docker, BREW_FLAGS: '--cask' }
      - |
        if [[ ! -d ~/.docker ]]; then
          open -a Docker
        fi

  google-cloud-sdk:
    cmds:
      - task: brewinstall
        vars: { NAME: google-cloud-sdk, BREW_FLAGS: '--cask' }

  vscode:
    cmds:
      - task: brewinstall
        vars: { NAME: visual-studio-code, BREW_FLAGS: '--cask' }
      - code --install-extension EditorConfig.EditorConfig
      - code --install-extension Rubymaniac.vscode-direnv
      - code --install-extension ms-vscode-remote.remote-containers

  dotfiles:
    cmds:
      - |
        mkdir -p ~/local/devenv/
        cp -rfP ../dotfiles ~/local/
        ln -sf ~/local/dotfiles/apply.sh ~/local/devenv/apply.sh
        ln -sf ~/local/dotfiles/pyenv.sh ~/local/devenv/pyenv.sh
        ln -sf ~/local/dotfiles/.editorconfig ~/.editorconfig
        ln -sf ~/local/dotfiles/.bashrc ~/.bashrc
        ln -sf ~/local/dotfiles/.bash_profile ~/.bash_profile
        ln -sf ~/local/dotfiles/.bash ~/
        ln -sf ~/local/dotfiles/.config/nvim ~/.config/
        ln -sf ~/local/dotfiles/.config/dein ~/.config/
        ln -sf ~/local/dotfiles/.config/alacritty ~/.config/
        ln -sf ~/local/dotfiles/.tmux.conf ~/

  font:
    cmds:
      - |
        brew install --cask font-monaspace font-hackgen-nerd
